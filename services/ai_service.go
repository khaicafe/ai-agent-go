package services

import (
	"context"
	"encoding/json"
	"os"

	"github.com/sashabaranov/go-openai"
)

func ProcessAIRequest(userInput string) (string, error) {
	client := openai.NewClient(os.Getenv("OPENAI_API_KEY"))

	resp, err := client.CreateChatCompletion(
		context.Background(),
		openai.ChatCompletionRequest{
			// Model: openai.GPT4Turbo,
			// Model: "gpt-4o", // üîπ S·ª≠ d·ª•ng model c√≥ quy·ªÅn truy c·∫≠p
			// Model: "gpt-3.5-turbo",

			Model: "gpt-4o-mini",
			Messages: []openai.ChatCompletionMessage{
				{
					Role:    openai.ChatMessageRoleSystem,
					Content: "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI c√≥ th·ªÉ g·ªçi h√†m.",
				},
				{
					Role:    openai.ChatMessageRoleUser,
					Content: userInput,
				},
			},
			Tools: []openai.Tool{
				{
					Type: openai.ToolTypeFunction,
					Function: &openai.FunctionDefinition{
						Name:        "get_time",
						Description: "Get the current time",
					},
				},
				{
					Type: openai.ToolTypeFunction,
					Function: &openai.FunctionDefinition{
						Name:        "calculate",
						Description: "Calculate a mathematical expression",
						Parameters: map[string]interface{}{
							"type": "object",
							"properties": map[string]interface{}{
								"expression": map[string]interface{}{
									"type":        "string",
									"description": "Math expression, e.g., '3 + 5'",
								},
							},
							"required": []string{"expression"},
						},
					},
				},
				{
					Type: openai.ToolTypeFunction,
					Function: &openai.FunctionDefinition{
						Name:        "get_weather",
						Description: "Get the weather for a location",
						Parameters: map[string]interface{}{
							"type": "object",
							"properties": map[string]interface{}{
								"location": map[string]interface{}{
									"type":        "string",
									"description": "City name",
								},
							},
							"required": []string{"location"},
						},
					},
				},
			},
		},
	)
	if err != nil {
		return "", err
	}

	// N·∫øu AI g·ªçi m·ªôt Tool (Function Calling)
	if len(resp.Choices) > 0 && resp.Choices[0].Message.ToolCalls != nil {
		toolCall := resp.Choices[0].Message.ToolCalls[0]
		functionName := toolCall.Function.Name
		argsString := toolCall.Function.Arguments

		// üîπ Chuy·ªÉn ƒë·ªïi `argsString` th√†nh `json.RawMessage`
		argsJSON := json.RawMessage(argsString)

		// G·ªçi h√†m t∆∞∆°ng ·ª©ng
		result, err := HandleFunctionCall(functionName, argsJSON)
		if err != nil {
			return "", err
		}

		return result, nil
	}

	// N·∫øu AI kh√¥ng g·ªçi h√†m, tr·∫£ v·ªÅ ph·∫£n h·ªìi b√¨nh th∆∞·ªùng
	return resp.Choices[0].Message.Content, nil
}
